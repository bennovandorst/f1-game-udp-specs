diff --git a/2023/PacketSessionData.h b/2024/PacketSessionData.h
index 8d08fe4..7f4cdf2 100755
--- a/2023/PacketSessionData.h
+++ b/2024/PacketSessionData.h
@@ -8,13 +8,11 @@ struct PacketSessionData
     int8	            m_airTemperature;      	// Air temp. in degrees celsius
     uint8           m_totalLaps;           	// Total number of laps in this race
     uint16          m_trackLength;           	// Track length in metres
-    uint8           m_sessionType;         	// 0 = unknown, 1 = P1, 2 = P2, 3 = P3, 4 = Short P
-                                            	// 5 = Q1, 6 = Q2, 7 = Q3, 8 = Short Q, 9 = OSQ
-                                            	// 10 = R, 11 = R2, 12 = R3, 13 = Time Trial
+    uint8           m_sessionType;         	// 0 = unknown, see appendix
     int8            m_trackId;         		// -1 for unknown, see appendix
     uint8           m_formula;                  	// Formula, 0 = F1 Modern, 1 = F1 Classic, 2 = F2,
-                                                 // 3 = F1 Generic, 4 = Beta, 5 = Supercars
-// 6 = Esports, 7 = F2 2021
+                                                 // 3 = F1 Generic, 4 = Beta, 6 = Esports
+// 8 = F1 World, 9 = F1 Elimination
     uint16          m_sessionTimeLeft;    	// Time left in session in seconds
     uint16          m_sessionDuration;     	// Session duration in seconds
     uint8           m_pitSpeedLimit;      	// Pit speed limit in kilometres per hour
@@ -28,7 +26,7 @@ struct PacketSessionData
                                                  // 2 = virtual, 3 = formation lap
     uint8           m_networkGame;               // 0 = offline, 1 = online
     uint8           m_numWeatherForecastSamples; // Number of weather samples to follow
-    WeatherForecastSample m_weatherForecastSamples[56];   // Array of weather forecast samples
+    WeatherForecastSample m_weatherForecastSamples[64];   // Array of weather forecast samples
     uint8           m_forecastAccuracy;          // 0 = Perfect, 1 = Approximate
     uint8           m_aiDifficulty;              // AI Difficulty rating â€“ 0-110
     uint32          m_seasonLinkIdentifier;      // Identifier for season - persists across saves
@@ -58,4 +56,33 @@ struct PacketSessionData
     uint8    m_numSafetyCarPeriods;              // Number of safety cars called during session
     uint8    m_numVirtualSafetyCarPeriods;       // Number of virtual safety cars called
     uint8    m_numRedFlagPeriods;                // Number of red flags called during session
+    uint8    m_equalCarPerformance;              // 0 = Off, 1 = On
+    uint8    m_recoveryMode;              	// 0 = None, 1 = Flashbacks, 2 = Auto-recovery
+    uint8    m_flashbackLimit;            	// 0 = Low, 1 = Medium, 2 = High, 3 = Unlimited
+    uint8    m_surfaceType;               	// 0 = Simplified, 1 = Realistic
+    uint8    m_lowFuelMode;               	// 0 = Easy, 1 = Hard
+    uint8    m_raceStarts;			// 0 = Manual, 1 = Assisted
+    uint8    m_tyreTemperature;           	// 0 = Surface only, 1 = Surface & Carcass
+    uint8    m_pitLaneTyreSim;            	// 0 = On, 1 = Off
+    uint8    m_carDamage;                 	// 0 = Off, 1 = Reduced, 2 = Standard, 3 = Simulation
+    uint8    m_carDamageRate;                    // 0 = Reduced, 1 = Standard, 2 = Simulation
+    uint8    m_collisions;                       // 0 = Off, 1 = Player-to-Player Off, 2 = On
+    uint8    m_collisionsOffForFirstLapOnly;     // 0 = Disabled, 1 = Enabled
+    uint8    m_mpUnsafePitRelease;               // 0 = On, 1 = Off (Multiplayer)
+    uint8    m_mpOffForGriefing;                 // 0 = Disabled, 1 = Enabled (Multiplayer)
+    uint8    m_cornerCuttingStringency;          // 0 = Regular, 1 = Strict
+    uint8    m_parcFermeRules;                   // 0 = Off, 1 = On
+    uint8    m_pitStopExperience;                // 0 = Automatic, 1 = Broadcast, 2 = Immersive
+    uint8    m_safetyCar;                        // 0 = Off, 1 = Reduced, 2 = Standard, 3 = Increased
+    uint8    m_safetyCarExperience;              // 0 = Broadcast, 1 = Immersive
+    uint8    m_formationLap;                     // 0 = Off, 1 = On
+    uint8    m_formationLapExperience;           // 0 = Broadcast, 1 = Immersive
+    uint8    m_redFlags;                         // 0 = Off, 1 = Reduced, 2 = Standard, 3 = Increased
+    uint8    m_affectsLicenceLevelSolo;          // 0 = Off, 1 = On
+    uint8    m_affectsLicenceLevelMP;            // 0 = Off, 1 = On
+    uint8    m_numSessionsInWeekend;             // Number of session in following array
+    uint8    m_weekendStructure[12];    		// List of session types to show weekend
+          					// structure - see appendix for types
+    float    m_sector2LapDistanceStart;          // Distance in m around track where sector 2 starts
+    float    m_sector3LapDistanceStart;          // Distance in m around track where sector 3 starts
 };
