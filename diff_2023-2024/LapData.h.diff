diff --git a/2023/LapData.h b/2024/LapData.h
index 0b66c38..94a65d8 100755
--- a/2023/LapData.h
+++ b/2024/LapData.h
@@ -2,12 +2,14 @@ struct LapData
 {
     uint32   m_lastLapTimeInMS;	       	 // Last lap time in milliseconds
     uint32   m_currentLapTimeInMS; 	 // Current time around the lap in milliseconds
-    uint16   m_sector1TimeInMS;           // Sector 1 time in milliseconds
-    uint8    m_sector1TimeMinutes;        // Sector 1 whole minute part
-    uint16   m_sector2TimeInMS;           // Sector 2 time in milliseconds
-    uint8    m_sector2TimeMinutes;        // Sector 2 whole minute part
-    uint16   m_deltaToCarInFrontInMS;     // Time delta to car in front in milliseconds
-    uint16   m_deltaToRaceLeaderInMS;     // Time delta to race leader in milliseconds
+    uint16   m_sector1TimeMSPart;         // Sector 1 time milliseconds part
+    uint8    m_sector1TimeMinutesPart;    // Sector 1 whole minute part
+    uint16   m_sector2TimeMSPart;         // Sector 2 time milliseconds part
+    uint8    m_sector2TimeMinutesPart;    // Sector 2 whole minute part
+    uint16   m_deltaToCarInFrontMSPart;   // Time delta to car in front milliseconds part
+    uint8    m_deltaToCarInFrontMinutesPart; // Time delta to car in front whole minute part
+    uint16   m_deltaToRaceLeaderMSPart;      // Time delta to race leader milliseconds part
+    uint8    m_deltaToRaceLeaderMinutesPart; // Time delta to race leader whole minute part
     float    m_lapDistance;		 // Distance vehicle is around current lap in metres – could
 					 // be negative if line hasn’t been crossed yet
     float    m_totalDistance;		 // Total distance travelled in session in metres – could
@@ -34,4 +36,6 @@ struct LapData
     uint16   m_pitLaneTimeInLaneInMS;   	 // If active, the current time spent in the pit lane in ms
     uint16   m_pitStopTimerInMS;        	 // Time of the actual pit stop in ms
     uint8    m_pitStopShouldServePen;   	 // Whether the car should serve a penalty at this stop
+    float    m_speedTrapFastestSpeed;     // Fastest speed through speed trap for this car in kmph
+    uint8    m_speedTrapFastestLap;       // Lap no the fastest speed was achieved, 255 = not set
 };
